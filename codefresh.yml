version: '1.0'
steps:
    start_clean:
        title: Clean up CodeFresh volume
        # Images come from hierarchy at: https://github.com/docker-library/python
        image: python:3.8-buster
        commands:
            - rm -rf '${{CF_REPO_NAME}}' venv

    clone_leaf-common:
        type: git-clone
        title: Clone leaf-common
        repo: '${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}'
        revision: '${{CF_REVISION}}'
        git: github

    install_dependencies_and_setup:
        title: Install dependencies and setup security
        image: python:3.8-buster
        shell: bash
        description: >-
            1. Create a virtualenv inside the CodeFresh workspace
               so that it is transferable between freestyle steps.
            2. Install python dependencies
        commands:
            - export VENV=./venv/codefresh
            - mkdir -p $VENV
            - pip install pip==22.1
            - pip install virtualenv==20.14.1
            - export VENV_CMD=`which virtualenv`
            - $VENV_CMD $VENV
            - source $VENV/bin/activate
            - pip install pip==22.1
            - pip install virtualenv==20.14.1
            - cd '${{CF_REPO_NAME}}'
            - git status
            - pip --no-cache-dir install -r requirements.txt
            - pip --no-cache-dir install -r requirements-build.txt
            - pip -V
            - export PYTHONPATH=$PWD

    run_pylint:
        title: Run pylint
        image: python:3.8-buster
        description: "Run Pylint"
        # Allow the pipeline to continue if this step fails
        fail_fast: false
        shell: bash
        commands:
            - export VENV=./venv/codefresh
            - source $VENV/bin/activate
            - echo "PATH=$PATH"
            - cd '${{CF_REPO_NAME}}'
            - git status
            - build_scripts/run_pylint.sh

    run_flake8:
        title: Run flake8
        image: python:3.8-buster
        description: Run Flake8
        fail_fast: false
        shell: bash
        commands:
            - export VENV=./venv/codefresh
            - source $VENV/bin/activate
            - echo "PATH=$PATH"
            - cd '${{CF_REPO_NAME}}'
            - git status
            - build_scripts/run_flake8.sh

    tests:
        title: Run unit tests
        image: python:3.8-buster
        shell: bash
        description: Run unit tests (nosetests)
        commands:
            - export VENV=./venv/codefresh
            - source $VENV/bin/activate
            - cd '${{CF_REPO_NAME}}'
            - git status
            - export PYTHONPATH=$PWD
            - echo "PYTHONPATH=$PYTHONPATH"
            - export NOSETESTS_CMD=`which nosetests`
            - echo "NOSETESTS=$NOSETESTS_CMD"
            - $NOSETESTS_CMD -v --nocapture --with-ignore-docstrings --with-timer --timer-top-n 10 --timer-ok 30s --timer-warning 60s .

    static_checks:
        title: Check For Fast-Failed Static Tests
        image: alpine
        commands:
            - exit 1
        when:
            condition:
                any:
                    # Don't let flake8 fail the builds until we make an attempt at actually fixing it
                    static_test_fail: steps.run_pylint.result == 'failure' || steps.run_flake8.result == 'failure'

    publish_leafcommon_artifact:
        title: "Publish leafcommon Artifact"
        description: "Publish leafcommon artifact into configured private pypi."
        type: "freestyle"
        image: python:3.8-slim
        working_directory: ${{CF_REPO_NAME}}
        # provide PYPI_INDEX_URL as a pipeline variable in codefresh ui. For example, currently
        # PYPI_INDEX_URL=https://sentient.jfrog.io/artifactory/api/pypi/sentient-pip-local
        commands:
          - python setup.py -q bdist_wheel
          - pip install twine
          - python -m twine upload 
                       --password $ARTIFACTORY_PASSWORD 
                       --username $ARTIFACTORY_LOGIN 
                       --repository-url $PYPI_INDEX_URL
                       dist/*
        when:
          condition:
            all:
              # This is idiomatic Codefresh for detecting if ${{CF_RELEASE_TAG}} has a value.
              deploy_tagged_builds_only: 'includes("${{CF_RELEASE_TAG}}","{{CF_RELEASE_TAG}}") == false'

    end_clean:
        title: Clean up CodeFresh volume
        image: python:3.8-buster
        commands:
            - rm -rf '${{CF_REPO_NAME}}' venv
